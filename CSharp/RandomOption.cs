using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;


public class RandomOption
{
	public double getProbability(int k, int[] l1, int[] l2)
	{
		bool[,] A = new bool[k, k];
		for (int i = 0;i < l1.Length;i++)
		{
			int a, b;
			a = l1[i];
			b = l2[i];
			A[a, b] = A[b, a] = true;
		}
		
		int lim = 1 << k;
		long[,]D = new long[k, lim];	// last, used.
		
		for (int i = 0;i < k;i++)
			D[i, 1 << i] = 1;			// one single lane is always OK.			

		for (int m = 0;m < lim;m++)
			for (int i = 0;i < k;i++)
				if (((m >> i) & 1) == 0)	// i-th lane is not used yet.
				{
					// enumerate previous lane.					
					for (int j = 0;j < k;j++)
						if (i != j && !A[i, j])	// i and j can be placed side by side.
							D[i, m | (1 << i)] += D[j, m];
				}
		
		long tot = 1;
		for (int i = 2;i <= k;i++)
			tot *= i;
			
		long ok = 0;
		for (int i = 0;i < k;i++)
			ok += D[i, lim-1];
			
		return (double)ok / (double)tot;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	#region Testing code generated by KawigiEdit
	[STAThread]
	private static Boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, Boolean hasAnswer, double p3) {
		Console.Write("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.Length > i; ++i) {
			if (i > 0) {
				Console.Write(",");
			}
			Console.Write(p1[i]);
		}
		Console.Write("}" + "," + "{");
		for (int i = 0; p2.Length > i; ++i) {
			if (i > 0) {
				Console.Write(",");
			}
			Console.Write(p2[i]);
		}
		Console.Write("}");
		Console.WriteLine("]");
		RandomOption obj;
		double answer;
		obj = new RandomOption();
		DateTime startTime = DateTime.Now;
		answer = obj.getProbability(p0, p1, p2);
		DateTime endTime = DateTime.Now;
		Boolean res;
		res = true;
		Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
		if (hasAnswer) {
			Console.WriteLine("Desired answer:");
			Console.WriteLine("\t" + p3);
		}
		Console.WriteLine("Your answer:");
		Console.WriteLine("\t" + answer);
		if (hasAnswer) {
			res = Math.Abs(p3 - answer) <= 1e-9 * Math.Max(1.0, Math.Abs(p3));
		}
		if (!res) {
			Console.WriteLine("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime).TotalSeconds >= 2) {
			Console.WriteLine("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			Console.WriteLine("Match :-)");
		} else {
			Console.WriteLine("OK, but is it right?");
		}
		Console.WriteLine("");
		return res;
	}
	public static void Main(string[] args) {
		Boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		int[] p2;
		double p3;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = new int[]{0};
		p2 = new int[]{3};
		p3 = 0.6D;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 5;
		p1 = new int[]{0,1,2};
		p2 = new int[]{1,2,0};
		p3 = 0.1D;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 5;
		p1 = new int[]{2,2,2,2};
		p2 = new int[]{0,1,3,4};
		p3 = 0.0D;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 7;
		p1 = new int[]{0,1,2};
		p2 = new int[]{6,5,4};
		p3 = 0.3904761904761904D;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 7;
		p1 = new int[]{3,5,1,0,2,6,4};
		p2 = new int[]{0,2,4,6,1,5,3};
		p3 = 0.09166666666666667D;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			Console.WriteLine("You're a stud (at least on the example cases)!");
		} else {
			Console.WriteLine("Some of the test cases had errors.");
		}
	}
	#endregion
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
