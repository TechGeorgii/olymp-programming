using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;


public class BigFatInteger
{
	public int minOperations(int A, int B)
	{
		List<int> pows = new List<int>();
		for (int i = 2; i * i <= A; i++)
		{
			if (A % i == 0)
			{
				int p = 0;
				while (A % i == 0)
				{
					p++;
					A /= i;
				}
				pows.Add(p * B);
			}
		}
		if (A != 1)
			pows.Add(B);

		int res = 0;

		while (true)
		{
			bool ch = false;
			for (int i = 0; i < pows.Count; i++)
				if (pows[i] % 2 == 0)
				{
					pows[i] /= 2;
					ch = true;
				}
				else if (pows[i] != 1)
				{
					pows[i] = (pows[i] + 1) / 2;
					ch = true;
				}
			if (!ch)
				break;
			res++;
		}

		res += pows.Count;

		return res;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	#region Testing code generated by KawigiEdit
	[STAThread]
	private static Boolean KawigiEdit_RunTest(int testNum, int p0, int p1, Boolean hasAnswer, int p2)
	{
		Console.Write("Test " + testNum + ": [" + p0 + "," + p1);
		Console.WriteLine("]");
		BigFatInteger obj;
		int answer;
		obj = new BigFatInteger();
		DateTime startTime = DateTime.Now;
		answer = obj.minOperations(p0, p1);
		DateTime endTime = DateTime.Now;
		Boolean res;
		res = true;
		Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
		if (hasAnswer)
		{
			Console.WriteLine("Desired answer:");
			Console.WriteLine("\t" + p2);
		}
		Console.WriteLine("Your answer:");
		Console.WriteLine("\t" + answer);
		if (hasAnswer)
		{
			res = answer == p2;
		}
		if (!res)
		{
			Console.WriteLine("DOESN'T MATCH!!!!");
		}
		else if ((endTime - startTime).TotalSeconds >= 2)
		{
			Console.WriteLine("FAIL the timeout");
			res = false;
		}
		else if (hasAnswer)
		{
			Console.WriteLine("Match :-)");
		}
		else
		{
			Console.WriteLine("OK, but is it right?");
		}
		Console.WriteLine("");
		return res;
	}
	public static void Main(string[] args)
	{
		Boolean all_right;
		all_right = true;

		int p0;
		int p1;
		int p2;

		// ----- test 0 -----
		p0 = 6;
		p1 = 1;
		p2 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 162;
		p1 = 1;
		p2 = 4;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 999983;
		p1 = 9;
		p2 = 5;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 360;
		p1 = 8;
		p2 = 8;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right)
		{
			Console.WriteLine("You're a stud (at least on the example cases)!");
		}
		else
		{
			Console.WriteLine("Some of the test cases had errors.");
		}
	}
	#endregion
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
