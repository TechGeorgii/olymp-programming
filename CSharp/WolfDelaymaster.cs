using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;


public class WolfDelaymaster
{
	string a;
	bool[,] D;
	bool[,] C;
	string orig = "wolf";

	public string check(string str)
	{
		a = str;
		D = new bool[a.Length, a.Length];
		C = new bool[a.Length, a.Length];

		return res(0, a.Length - 1) ? "VALID" : "INVALID";
	}

	bool res(int s, int f)
	{
		int l = f - s + 1;
		if (l % 4 != 0)
			return false;

		if (C[s, f])
			return D[s, f];


		bool ok = true;
		for (int i = s; i <= f; i++)
		{
			int p = (i - s) / (l / 4);
			if (a[i] != orig[p])
			{
				ok = false;
				break;
			}
		}

		if (!ok)
		{
			for (int i = s + 4; i <= f - 3; i += 4)
				if (res(s, i - 1) && res(i, f))
				{
					ok = true;
					break;
				}
		}

		C[s, f] = true;
		D[s, f] = ok;
		return ok;
	}


	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	#region Testing code generated by KawigiEdit
	[STAThread]
	private static Boolean KawigiEdit_RunTest(int testNum, string p0, Boolean hasAnswer, string p1)
	{
		Console.Write("Test " + testNum + ": [" + "\"" + p0 + "\"");
		Console.WriteLine("]");
		WolfDelaymaster obj;
		string answer;
		obj = new WolfDelaymaster();
		DateTime startTime = DateTime.Now;
		answer = obj.check(p0);
		DateTime endTime = DateTime.Now;
		Boolean res;
		res = true;
		Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
		if (hasAnswer)
		{
			Console.WriteLine("Desired answer:");
			Console.WriteLine("\t" + "\"" + p1 + "\"");
		}
		Console.WriteLine("Your answer:");
		Console.WriteLine("\t" + "\"" + answer + "\"");
		if (hasAnswer)
		{
			res = answer == p1;
		}
		if (!res)
		{
			Console.WriteLine("DOESN'T MATCH!!!!");
		}
		else if ((endTime - startTime).TotalSeconds >= 2)
		{
			Console.WriteLine("FAIL the timeout");
			res = false;
		}
		else if (hasAnswer)
		{
			Console.WriteLine("Match :-)");
		}
		else
		{
			Console.WriteLine("OK, but is it right?");
		}
		Console.WriteLine("");
		return res;
	}
	public static void Main(string[] args)
	{
		Boolean all_right;
		all_right = true;

		string p0;
		string p1;

		// ----- test 0 -----
		p0 = "wolf";
		p1 = "VALID";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = "wwolfolf";
		p1 = "INVALID";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = "wolfwwoollffwwwooolllfffwwwwoooollllffff";
		p1 = "VALID";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = "flowolf";
		p1 = "INVALID";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		if (all_right)
		{
			Console.WriteLine("You're a stud (at least on the example cases)!");
		}
		else
		{
			Console.WriteLine("Some of the test cases had errors.");
		}
	}
	#endregion
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
