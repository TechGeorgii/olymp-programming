using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;


public class PalindromicSubstringsDiv2
{
	public int count(string[] S1, string[] S2)
	{
		string s = "";

		foreach (string x in S1)
			s += x;
		foreach (string x in S2)
			s += x;

		int n = s.Length;

		int[,] D = new int[n, n + 1];	// at pos i of length j
		for (int i = 0; i < n; i++)
		{
			D[i, 1] = 1;
			D[i, 0] = 1;
		}

		for (int len = 0; len <= n; len++)	// old len
			for (int i = 1; i < n; i++)
			{
				if (i + len >= n || len + 2 > n)
					break;
				if (s[i - 1] == s[i + len])
					D[i - 1, len + 2] += D[i, len];
			}

		int r = 0;
		for (int i = 0; i < n; i++)
			for (int len = 1; len <= n; len++)
				r += D[i, len];

		return r;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	#region Testing code generated by KawigiEdit
	[STAThread]
	private static Boolean KawigiEdit_RunTest(int testNum, string[] p0, string[] p1, Boolean hasAnswer, int p2)
	{
		Console.Write("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.Length > i; ++i)
		{
			if (i > 0)
			{
				Console.Write(",");
			}
			Console.Write("\"" + p0[i] + "\"");
		}
		Console.Write("}" + "," + "{");
		for (int i = 0; p1.Length > i; ++i)
		{
			if (i > 0)
			{
				Console.Write(",");
			}
			Console.Write("\"" + p1[i] + "\"");
		}
		Console.Write("}");
		Console.WriteLine("]");
		PalindromicSubstringsDiv2 obj;
		int answer;
		obj = new PalindromicSubstringsDiv2();
		DateTime startTime = DateTime.Now;
		answer = obj.count(p0, p1);
		DateTime endTime = DateTime.Now;
		Boolean res;
		res = true;
		Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
		if (hasAnswer)
		{
			Console.WriteLine("Desired answer:");
			Console.WriteLine("\t" + p2);
		}
		Console.WriteLine("Your answer:");
		Console.WriteLine("\t" + answer);
		if (hasAnswer)
		{
			res = answer == p2;
		}
		if (!res)
		{
			Console.WriteLine("DOESN'T MATCH!!!!");
		}
		else if ((endTime - startTime).TotalSeconds >= 2)
		{
			Console.WriteLine("FAIL the timeout");
			res = false;
		}
		else if (hasAnswer)
		{
			Console.WriteLine("Match :-)");
		}
		else
		{
			Console.WriteLine("OK, but is it right?");
		}
		Console.WriteLine("");
		return res;
	}
	public static void Main(string[] args)
	{
		Boolean all_right;
		all_right = true;

		string[] p0;
		string[] p1;
		int p2;

		// ----- test 0 -----
		p0 = new string[] { "a", "a", "" };
		p1 = new string[] { "a" };
		p2 = 6;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new string[] { "zaz" };
		p1 = new string[] { };
		p2 = 4;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new string[] { "top" };
		p1 = new string[] { "coder" };
		p2 = 8;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new string[] { };
		p1 = new string[] { "daata" };
		p2 = 7;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right)
		{
			Console.WriteLine("You're a stud (at least on the example cases)!");
		}
		else
		{
			Console.WriteLine("Some of the test cases had errors.");
		}
	}
	#endregion
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
