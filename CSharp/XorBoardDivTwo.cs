using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;


public class XorBoardDivTwo
{
	public int theMax(string[] b)
	{
		int n, m;
		n = b.Length;
		m = b[0].Length;
		
		int res = 0;
		for (int i = 0;i < n;i++)
			for (int j = 0;j < m;j++)
			{
				int cur = 0;
				for (int p = 0;p < n;p++)
					for (int q = 0;q < m;q++)
					{
						if (p == i || q == j)
						{
							if (i == p && j == q)								
							{
								if (b[p][q] == '1')
									cur++;
							}
							else if (b[p][q] == '0')
									cur++;
						}
						else if (b[p][q] == '1') cur++;		
					}
				//Console.WriteLine(cur.ToString() + " " + p.ToString() + " " + q.ToString());
				res = Math.Max(cur, res);
			}
			
		return res;
	}


	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	#region Testing code generated by KawigiEdit
	[STAThread]
	private static Boolean KawigiEdit_RunTest(int testNum, string[] p0, Boolean hasAnswer, int p1) {
		Console.Write("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.Length > i; ++i) {
			if (i > 0) {
				Console.Write(",");
			}
			Console.Write("\"" + p0[i] + "\"");
		}
		Console.Write("}");
		Console.WriteLine("]");
		XorBoardDivTwo obj;
		int answer;
		obj = new XorBoardDivTwo();
		DateTime startTime = DateTime.Now;
		answer = obj.theMax(p0);
		DateTime endTime = DateTime.Now;
		Boolean res;
		res = true;
		Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
		if (hasAnswer) {
			Console.WriteLine("Desired answer:");
			Console.WriteLine("\t" + p1);
		}
		Console.WriteLine("Your answer:");
		Console.WriteLine("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			Console.WriteLine("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime).TotalSeconds >= 2) {
			Console.WriteLine("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			Console.WriteLine("Match :-)");
		} else {
			Console.WriteLine("OK, but is it right?");
		}
		Console.WriteLine("");
		return res;
	}
	public static void Main(string[] args) {
		Boolean all_right;
		all_right = true;
		
		string[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new string[]{"101","010","101"};
		p1 = 9;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new string[]{"111","111","111"};
		p1 = 5;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new string[]{"0101001","1101011"};
		p1 = 9;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new string[]{"000","001","010","011","100","101","110","111"};
		p1 = 15;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new string[]{"000000000000000000000000","011111100111111001111110","010000000100000001000000","010000000100000001000000","010000000100000001000000","011111100111111001111110","000000100000001000000010","000000100000001000000010","000000100000001000000010","011111100111111001111110","000000000000000000000000"};
		p1 = 105;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			Console.WriteLine("You're a stud (at least on the example cases)!");
		} else {
			Console.WriteLine("Some of the test cases had errors.");
		}
	}
	#endregion
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
